# -*- coding: utf-8 -*-
"""user_behavior_analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/126R7EozVaDRUPZs9e9-oXmgtOc9SUlm_
"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

logon_path = '/content/drive/MyDrive/Dataset/logon.csv'
device_path = '/content/drive/MyDrive/Dataset/device.csv'
http_path = '/content/drive/MyDrive/Dataset/http.csv'
ldap_path = '/content/drive/MyDrive/Dataset/LDAP_2009-12.csv'

import pandas as pd
from datetime import datetime

def load_and_merge_behavior_logs(logon_path, device_path, http_path, ldap_path):
    # Load CSV files
    logon_df = pd.read_csv(logon_path)
    device_df = pd.read_csv(device_path)
    http_df = pd.read_csv(http_path)
    ldap_df = pd.read_csv(ldap_path)

    # Standardize column names
    logon_df.columns = ['id', 'date', 'user_id', 'pc', 'activity']
    device_df.columns = ['id', 'date', 'user_id', 'pc', 'activity']
    http_df.columns = ['id', 'date', 'user_id', 'pc', 'url']
    ldap_df.columns = ['employee_name', 'user_id', 'domain', 'email', 'role']

    # Convert date columns to datetime
    for df in [logon_df, device_df, http_df]:
        df['date'] = pd.to_datetime(df['date'], errors='coerce')

    return logon_df, device_df, http_df, ldap_df

def detect_after_hours_logon(df):
    df['hour'] = df['date'].dt.hour
    df['after_hours_logon'] = df['hour'].apply(lambda x: x < 8 or x > 18)
    return df

def detect_usb_after_hours(df):
    df['hour'] = df['date'].dt.hour
    df['after_hours_usb'] = df.apply(lambda row: row['activity'].lower() == 'usb insert' and (row['hour'] < 8 or row['hour'] > 18), axis=1)
    return df

def classify_events(logon_df, device_df, http_df, ldap_df):
    # Merge LDAP to get roles
    logon_df = logon_df.merge(ldap_df[['user_id', 'role']], on='user_id', how='left')
    device_df = device_df.merge(ldap_df[['user_id', 'role']], on='user_id', how='left')
    http_df = http_df.merge(ldap_df[['user_id', 'role']], on='user_id', how='left')

    # Rule 1: Admin logging in after hours
    logon_df['alert'] = logon_df.apply(lambda row: 'Admin After Hours Logon'
                                       if row['role'] == 'Security' and row.get('after_hours_logon') else '', axis=1)

    # Rule 2: USB insert after hours
    device_df['alert'] = device_df.apply(lambda row: 'USB Insert After Hours'
                                         if row.get('after_hours_usb') else '', axis=1)

    # Rule 3: Accessing suspicious domains
    suspicious_keywords = ['torrent', 'hack', 'darkweb', 'crack', 'pirate']
    http_df['alert'] = http_df['url'].apply(lambda url: 'Suspicious URL Accessed'
                                            if any(keyword in url.lower() for keyword in suspicious_keywords) else '')

    return logon_df, device_df, http_df

def analyze_user_behavior(logon_path, device_path, http_path, ldap_path):
    logon_df, device_df, http_df, ldap_df = load_and_merge_behavior_logs(logon_path, device_path, http_path, ldap_path)

    # Apply rule-based detections
    logon_df = detect_after_hours_logon(logon_df)
    device_df = detect_usb_after_hours(device_df)
    logon_df, device_df, http_df = classify_events(logon_df, device_df, http_df, ldap_df)

    # Merge all into one DataFrame
    logon_df['log_type'] = 'logon'
    device_df['log_type'] = 'device'
    http_df['log_type'] = 'http'
    http_df.rename(columns={'url': 'activity'}, inplace=True)

    final_df = pd.concat([logon_df[['date', 'user_id', 'pc', 'activity', 'role', 'alert', 'log_type']],
                          device_df[['date', 'user_id', 'pc', 'activity', 'role', 'alert', 'log_type']],
                          http_df[['date', 'user_id', 'pc', 'activity', 'role', 'alert', 'log_type']]])

    final_df.sort_values(by='date', inplace=True)

    # Filter abnormal or suspicious logs
    alert_df = final_df[final_df['alert'] != '']

    return final_df, alert_df

full_df, alerts_df = analyze_user_behavior(logon_path, device_path, http_path, ldap_path)

# Preview
print("âœ… Merged Full Dataset:")
display(full_df.head(10))

print("ðŸš¨ Detected Suspicious Events:")
display(alerts_df)